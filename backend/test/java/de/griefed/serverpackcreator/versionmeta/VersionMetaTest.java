package de.griefed.serverpackcreator.versionmeta;

import de.griefed.serverpackcreator.Dependencies;
import java.io.IOException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class VersionMetaTest {
  public VersionMetaTest() {}

  @Test
  void meta() throws IOException {
    Assertions.assertNotNull(Dependencies.getInstance().VERSIONMETA().update());
  }

  @Test
  void minecraft() {
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().minecraft().checkMinecraftVersion("1.16.5"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().minecraft().checkMinecraftVersion("1.16.7"));
    Assertions.assertNotNull(Dependencies.getInstance().VERSIONMETA().minecraft().latestRelease());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestRelease().version());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestRelease().server());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestRelease().url());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestRelease().type(), Type.RELEASE);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releaseVersionsArrayDescending()
            .length,
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releaseVersionsArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .releaseVersionsArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releaseVersionsArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releaseVersionsArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .releaseVersionsArrayDescending()
                    .length
                - 1]);
    Dependencies.getInstance()
        .VERSIONMETA()
        .minecraft()
        .releasesDescending()
        .forEach(
            release -> {
              Assertions.assertNotNull(release);
              Assertions.assertNotNull(release.version());
              Assertions.assertNotNull(release.server());
              Assertions.assertNotNull(release.server().version());
              Assertions.assertSame(Type.RELEASE, release.server().type());
              if (release.server().url().isPresent()) {
                Assertions.assertNotNull(release.server().url().get());
              }
              if (release.server().javaVersion().isPresent()) {
                Assertions.assertTrue(release.server().javaVersion().get() > 0);
              }
              Assertions.assertNotNull(release.url());
              Assertions.assertEquals(release.type(), Type.RELEASE);
            });
    Assertions.assertNotNull(Dependencies.getInstance().VERSIONMETA().minecraft().latestSnapshot());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestSnapshot().version());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestSnapshot().url());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestSnapshot().type(),
        Type.SNAPSHOT);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsVersionsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotVersionsArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotVersionsArrayDescending()
            .length,
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsVersionsDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotVersionsArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotVersionsArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .snapshotVersionsArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotVersionsArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotVersionsArrayAscending()
            .length,
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotVersionsAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotVersionsArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotVersionsArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .snapshotVersionsArrayDescending()
                    .length
                - 1]);
    Dependencies.getInstance()
        .VERSIONMETA()
        .minecraft()
        .releasesDescending()
        .forEach(
            release -> {
              Assertions.assertNotNull(release);
              Assertions.assertNotNull(release.version());
              Assertions.assertNotNull(release.url());
              Assertions.assertEquals(release.type(), Type.RELEASE);
              if (release.forge().isPresent()) {
                release
                    .forge()
                    .get()
                    .forEach(
                        forgeInstance -> {
                          Assertions.assertNotNull(forgeInstance);
                          Assertions.assertNotNull(forgeInstance.minecraftVersion());
                          Assertions.assertNotNull(forgeInstance.minecraftClient());
                          Assertions.assertNotNull(forgeInstance.installerUrl());
                          Assertions.assertNotNull(forgeInstance.forgeVersion());
                        });
              }
            });
    Dependencies.getInstance()
        .VERSIONMETA()
        .minecraft()
        .releaseVersionsAscending()
        .forEach(
            mcVer ->
                Assertions.assertTrue(
                    Dependencies.getInstance()
                        .VERSIONMETA()
                        .minecraft()
                        .getClient(mcVer)
                        .isPresent()));
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releasesArrayDescending()[
            Dependencies.getInstance().VERSIONMETA().minecraft().releasesArrayDescending().length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayDescending().length,
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotsArrayAscending()[
            Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayAscending().length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotsArrayDescending()[
            Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsArrayDescending().length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().getServer("1.16.5").get());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().minecraft().checkServerAvailability("1.16.5"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().minecraft().checkServerAvailability("1.16.6"));
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestReleaseServer());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().latestSnapshotServer());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersAscending());
    Dependencies.getInstance()
        .VERSIONMETA()
        .minecraft()
        .snapshotsDescending()
        .forEach(
            snapshot -> {
              Assertions.assertNotNull(snapshot);
              Assertions.assertNotNull(snapshot.version());
              Assertions.assertNotNull(snapshot.url());
              Assertions.assertEquals(snapshot.type(), Type.SNAPSHOT);
            });
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releasesServersArrayDescending()
            .length,
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releasesServersArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .releasesServersArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().releasesServersArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .releasesServersArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .releasesServersArrayDescending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotsServersArrayDescending()
            .length,
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotsServersArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .snapshotsServersArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotsServersArrayAscending()
            .length,
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().minecraft().snapshotsServersArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .minecraft()
            .snapshotsServersArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .minecraft()
                    .snapshotsServersArrayDescending()
                    .length
                - 1]);
  }

  @Test
  void forge() {
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().checkForgeVersion("40.0.45"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().forge().checkForgeVersion("40.99.99"));
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().checkMinecraftVersion("1.16.5"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().forge().checkMinecraftVersion("1.16.8"));
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .checkForgeAndMinecraftVersion("1.18.2", "40.0.45"));
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .checkForgeAndMinecraftVersion("1.18.21", "99.0.45"));
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .isForgeInstanceAvailable("1.18.2", "40.0.45"));
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .isForgeInstanceAvailable("1.182.2", "40.023.45"));
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().isForgeInstanceAvailable("40.0.4"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().forge().isForgeInstanceAvailable("40.0123.4"));
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().supportedMinecraftVersion("40.0.4").get());
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .supportedMinecraftVersion("40.0.4")
            .isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .supportedMinecraftVersion("40.0123.4")
            .isPresent());
    Assertions.assertNotNull(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .getForgeInstance("1.18.2", "40.0.45")
            .get());
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .getForgeInstance("1.18.2", "40.0.45")
            .isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .getForgeInstance("1.18.2", "40.0123.45")
            .isPresent());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().getForgeInstance("40.0.45").get());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().getForgeInstance("40.0.45").isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .getForgeInstance("40.0.45123")
            .isPresent());
    Assertions.assertNotNull(Dependencies.getInstance().VERSIONMETA().forge().forgeVersions());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().forgeVersionsDescending());
    Assertions.assertNotNull(Dependencies.getInstance().VERSIONMETA().forge().forgeVersionsArray());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().forgeVersionsArrayDescending());
    Dependencies.getInstance()
        .VERSIONMETA()
        .forge()
        .forgeVersions()
        .forEach(
            forgeVersion -> {
              Assertions.assertTrue(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstance(forgeVersion)
                      .isPresent());
              Assertions.assertNotNull(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstance(forgeVersion)
                      .get());
              Assertions.assertNotNull(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstance(forgeVersion)
                      .get()
                      .forgeVersion());
              Assertions.assertNotNull(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstance(forgeVersion)
                      .get()
                      .minecraftVersion());
              Assertions.assertNotNull(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstance(forgeVersion)
                      .get()
                      .installerUrl());
              Assertions.assertNotNull(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstance(forgeVersion)
                      .get()
                      .minecraftClient());
            });
    Dependencies.getInstance()
        .VERSIONMETA()
        .forge()
        .minecraftVersionsAscending()
        .forEach(
            minecraftVersion -> {
              Assertions.assertTrue(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstances(minecraftVersion)
                      .isPresent());
              Dependencies.getInstance()
                  .VERSIONMETA()
                  .forge()
                  .getForgeInstances(minecraftVersion)
                  .get()
                  .forEach(
                      instance -> {
                        Assertions.assertNotNull(instance);
                        Assertions.assertNotNull(instance.installerUrl());
                        Assertions.assertNotNull(instance.forgeVersion());
                        Assertions.assertNotNull(instance.minecraftVersion());
                        Assertions.assertNotNull(instance.minecraftClient());
                      });
            });
    Dependencies.getInstance()
        .VERSIONMETA()
        .forge()
        .minecraftVersionsDescending()
        .forEach(
            minecraftVersion -> {
              Assertions.assertTrue(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .forge()
                      .getForgeInstances(minecraftVersion)
                      .isPresent());
              if (Dependencies.getInstance()
                  .VERSIONMETA()
                  .forge()
                  .getForgeInstances(minecraftVersion)
                  .isPresent()) {
                Dependencies.getInstance()
                    .VERSIONMETA()
                    .forge()
                    .getForgeInstances(minecraftVersion)
                    .get()
                    .forEach(
                        instance -> {
                          Assertions.assertNotNull(instance);
                          Assertions.assertNotNull(instance.installerUrl());
                          Assertions.assertNotNull(instance.forgeVersion());
                          Assertions.assertNotNull(instance.minecraftVersion());
                          Assertions.assertNotNull(instance.minecraftClient());
                        });
              }
            });
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().latestForgeVersion("1.18.2").get());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().latestForgeVersion("1.18.2").isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .latestForgeVersion("1.18.2123")
            .isPresent());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().oldestForgeVersion("1.18.2").get());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().oldestForgeVersion("1.18.2").isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .oldestForgeVersion("1.18.2123")
            .isPresent());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .minecraftVersionsArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .forge()
                    .minecraftVersionsArrayDescending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsArrayDescending().length,
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().forge().minecraftVersionsArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .minecraftVersionsArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .forge()
                    .minecraftVersionsArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsAscending("1.16.5")
            .get());
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsAscending("1.16.5")
            .isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsAscending("1.16.5123")
            .isPresent());
    Assertions.assertNotNull(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsDescending("1.16.5")
            .get());
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsDescending("1.16.5")
            .isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsDescending("1.16.5123")
            .isPresent());
    Assertions.assertNotNull(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayAscending("1.16.5")
            .get());
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayAscending("1.16.5")
            .isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayAscending("1.16.5123")
            .isPresent());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayAscending("1.16.5")
            .get()
            .length,
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsAscending("1.16.5")
            .get()
            .size());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayAscending("1.16.5")
            .get()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayDescending("1.16.5")
            .get()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .forge()
                    .availableForgeVersionsArrayDescending("1.16.5")
                    .get()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayDescending("1.16.5")
            .get());
    Assertions.assertTrue(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayDescending("1.16.5")
            .isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayDescending("1.16.5123")
            .isPresent());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayDescending("1.16.5")
            .get()
            .length,
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsDescending("1.16.5")
            .get()
            .size());
    Assertions.assertEquals(
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayDescending("1.16.5")
            .get()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .forge()
            .availableForgeVersionsArrayAscending("1.16.5")
            .get()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .forge()
                    .availableForgeVersionsArrayAscending("1.16.5")
                    .get()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().forge().installerUrl("40.0.45").get());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().forge().installerUrl("40.0.45").isPresent());
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().forge().installerUrl("40.0.41235").isPresent());
  }

  @Test
  void fabric() {
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().loaderVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().loaderVersionsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().loaderVersionsArrayAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().loaderVersionsArrayDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().latestLoaderVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().releaseLoaderVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().latestInstallerVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().releaseInstallerVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .fabric()
            .installerVersionsArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .fabric()
                    .installerVersionsArrayDescending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsArrayDescending().length,
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().fabric().installerVersionsArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .fabric()
            .installerVersionsArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .fabric()
                    .installerVersionsArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().latestInstallerUrl());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().fabric().releaseInstallerUrl());
    Dependencies.getInstance()
        .VERSIONMETA()
        .fabric()
        .installerVersionsAscending()
        .forEach(
            version -> {
              Assertions.assertTrue(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .fabric()
                      .isInstallerUrlAvailable(version));
              Assertions.assertNotNull(
                  Dependencies.getInstance().VERSIONMETA().fabric().installerUrl(version).get());
            });
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().fabric().isInstallerUrlAvailable("0.11233.3"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().fabric().installerUrl("0.13123.3").isPresent());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().fabric().checkFabricVersion("0.13.3"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().fabric().checkFabricVersion("0.12313.3"));
  }

  @Test
  void quilt() {
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().loaderVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().loaderVersionsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().loaderVersionsArrayAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().loaderVersionsArrayDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().latestLoaderVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().releaseLoaderVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().latestInstallerVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().releaseInstallerVersion());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsDescending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsAscending());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsArrayAscending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsArrayAscending().length,
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsAscending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsArrayAscending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .quilt()
            .installerVersionsArrayDescending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .quilt()
                    .installerVersionsArrayDescending()
                    .length
                - 1]);
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsArrayDescending());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsArrayDescending().length,
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsDescending().size());
    Assertions.assertEquals(
        Dependencies.getInstance().VERSIONMETA().quilt().installerVersionsArrayDescending()[0],
        Dependencies.getInstance()
            .VERSIONMETA()
            .quilt()
            .installerVersionsArrayAscending()[
            Dependencies.getInstance()
                    .VERSIONMETA()
                    .quilt()
                    .installerVersionsArrayAscending()
                    .length
                - 1]);
    Assertions.assertNotNull(Dependencies.getInstance().VERSIONMETA().quilt().latestInstallerUrl());
    Assertions.assertNotNull(
        Dependencies.getInstance().VERSIONMETA().quilt().releaseInstallerUrl());
    Dependencies.getInstance()
        .VERSIONMETA()
        .quilt()
        .installerVersionsAscending()
        .forEach(
            version -> {
              Assertions.assertTrue(
                  Dependencies.getInstance()
                      .VERSIONMETA()
                      .quilt()
                      .isInstallerUrlAvailable(version));
              Assertions.assertNotNull(
                  Dependencies.getInstance().VERSIONMETA().quilt().installerUrl(version).get());
            });
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().quilt().isInstallerUrlAvailable("0.11233.3"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().quilt().installerUrl("0.13123.3").isPresent());
    Assertions.assertTrue(
        Dependencies.getInstance().VERSIONMETA().quilt().checkQuiltVersion("0.16.1"));
    Assertions.assertFalse(
        Dependencies.getInstance().VERSIONMETA().quilt().checkQuiltVersion("0.12313.3"));
  }
}
